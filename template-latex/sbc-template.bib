@article{Garcia2004a,
abstract = {This paper presents an approach to retrieve the knowledge embedded in object-oriented legacy system. This approach aids in the migration from object-oriented code, written in Java, to a combination of objects and aspects, using AspectJ. The approach uses aspect mining in order to identify possible crosscutting concerns from the object-oriented source code and extracts them through refactorings into new aspect-oriented code. Next, the aspect-oriented design is retrieved through software transformations and may be imported in a CASE tool, becoming available in higher abstraction levels. The retrieved information constitutes important knowledge that may be reused in future projects or in reengineering. {\textcopyright}2004 IEEE.},
author = {Garcia, Vinicius Cardoso and Lucr{\'{e}}dio, Daniel and {Do Prado}, Antonio Francisco and {De Almeida}, Eduarde Santana and Alvaro, Alexandre},
doi = {10.1109/iri.2004.1431432},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/Artigos para Leitura/Using Reengineering and Aspect-based Techniques to Retrieve Knowledge.pdf:pdf},
isbn = {0780388194},
journal = {Proceedings of the 2004 IEEE International Conference on Information Reuse and Integration, IRI-2004},
pages = {30--35},
title = {{Using reengineering and aspect-based techniques to retrieve knowledge embedded in object-oriented legacy system}},
year = {2004}
}
@article{Silva2018,
author = {da Silva, Hugo henrique Oliveira Sampaio},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/Artigos para Leitura/Dissertacao HUGO HENRIQUE OLIVEIRA SAMPAIO DA SILVA DEZ 2018.pdf:pdf},
journal = {Universidade Salvador},
pages = {227--249},
title = {{Um Guia para apoiar a migra{\c{c}}a{\~{o}} de sistemas de sogtware legados para arquitetura baseada em microservi{\c{c}}os}},
volume = {2},
year = {2018}
}
@article{OBrien2005,
abstract = {There are many good reasons why organizations should perform software architecture reconstructions. However, few organizations are willing to pay for the effort. Software architecture reconstruction must be viewed not as an effort on its own but as a contribution in a broader technical context, such as the streamlining of products into a product line or the modernization of systems that hit their architectural borders, that is require major restructuring. In this paper we propose the use of architecture reconstruction to support System Modernization through the identification and reuse of legacy components as services in a Service-Oriented Architecture (SOA). A case study showing how architecture reconstruction was used on a system to support an organization's decision-making process is presented. {\textcopyright} 2005 IEEE.},
author = {O'Brien, Liam and Smith, Dennis and Lewis, Grace},
doi = {10.1109/STEP.2005.29},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Supporting Migration to Services using.pdf:pdf},
isbn = {076952639X},
journal = {Proceedings - 13th IEEE International Workshop on Software Technology and Engineering Practice, STEP 2005},
keywords = {Architecture,Architecture reconstruction,Migration to services,Service oriented architecture,System modernization},
pages = {81--91},
title = {{Supporting migration to services using software architecture reconstruction}},
volume = {2005},
year = {2005}
}
@article{Tang2017,
abstract = {Software Product Line Engineering is a key approach to construct applications with systematical reuse of architecture, documents and other relevant components. To migrate legacy software into a product line system, it is essential to identify the code segments that should be constructed as features from the source base. However, this could be an error-prone and complicated task, as it involves exploring a complex structure and extracting the relations between different components within a system. And normally, representing structural information of a program in a mathematical way should be a promising direction to investigate. We improve this situation by proposing a probability-based approach named StiCProb to capture source code fragments for feature concerned, which inherently provides a conditional probability to describe the closeness between two programming elements. In the case study, we conduct feature mining on several legacy systems, to compare our approach with other related approaches. As demonstrated in our experiment, our approach could support developers to locate features within legacy successfully with a better performance of 83{\%} for precision and 41{\%} for recall.},
author = {Tang, Yutian and Leung, Hareton},
doi = {10.1109/SANER.2017.7884608},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/StiCProb A Novel Feature Mining Approach using.pdf:pdf},
isbn = {9781509055012},
journal = {SANER 2017 - 24th IEEE International Conference on Software Analysis, Evolution, and Reengineering},
keywords = {Software product line,feature mining,program slicing,variability},
pages = {45--55},
publisher = {IEEE},
title = {{StiCProb: A novel feature mining approach using conditional probability}},
year = {2017}
}
@article{Pan1999,
abstract = {Software Reliability is the probability of failure-free software operation for a specified period of time in a specified environment. Software Reliability is also an important factor affecting system reliability. It differs from hardware reliability in that it reflects the design perfection, rather than manufacturing perfection. The high complexity of software is the major contributing factor of Software Reliability problems. Software Reliability is not a function of time - although researchers have come up with models relating the two. The modeling technique for Software Reliability is reaching its prosperity, but before using the technique, we must carefully select the appropriate model that can best suit our case. Measurement in software is still in its infancy. No good quantitative methods have been developed to represent Software Reliability without excessive limitations. Various approaches can be used to improve the reliability of software, however, it is hard to balance development time and budget with software reliability},
author = {Pan, Jiantao},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Software Reliability.pdf:pdf},
pages = {1--9},
title = {{Software Reliability}},
year = {1999}
}
@article{Velmourougan2014,
author = {Velmourougan, S and Dhavachelvan, P and Baskaran, R and Ravikumar, B},
doi = {10.1109/ICACC.2014.71},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Software development Life cycle model to improve maintainability of software app.pdf:pdf},
isbn = {9781479943630},
journal = {2014 Fourth International Conference on Advances in Computing and Communications},
keywords = {- software maintainability,design,software maintenance criteria},
pages = {270--273},
publisher = {IEEE},
title = {{Software development Life cycle model to improve maintainability of software applications}},
year = {2014}
}
@article{Jin2019,
abstract = {Monolithic systems increasingly suffer from maintainability and scalability issues as they grow in functionality, size, and complexity. It is widely believed that (micro)service-based architectures can alleviate these problems as each service is supposed to have the following characteristics: clearly defined functionality, sufficient modularity, and the ability to evolve independently. Industrial practices show that service extraction from a legacy monolithic system is labor-intensive and complex. Existing work on service candidate identification aims to group entities of a monolithic system into potential service candidates, but this process has two major challenges: first, it is difficult to extract service candidates with consistent quality; second, it is hard to evaluate the identified service candidates regarding the above three characteristics. To address these challenges, this paper proposes the Functionality-oriented Service Candidate Identification (FoSCI) framework to identify service candidates from a monolithic system. Our approach is to record the monolith's execution traces, and extract services candidates using a search-based functional atom grouping algorithm. We also contribute a comprehensive service candidate evaluation suite that uses interface information, structural/conceptual dependency, and commit history. This evaluation system consists of 8 metrics, measuring functionality, modularity, and evolvability respectively of identified service candidates. We compare FoSCI with three existing methods, using 6 widely-used open-source projects as our evaluation subjects. Our results show that FoSCI outperforms existing methods in most measures.},
author = {Jin, Wuxia and Liu, Ting and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Zheng, Qinghua},
doi = {10.1109/tse.2019.2910531},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Service Candidate Identification from Monolithic system based on execution traces.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
number = {c},
pages = {1--1},
title = {{Service Candidate Identification from Monolithic Systems based on Execution Traces}},
volume = {5589},
year = {2019}
}
@article{Alcaniz2014,
author = {Alca{\~{n}}iz, Luis M{\'{a}}rquez and Rosado, David G and Mellado, Daniel and Fern{\'{a}}ndez-medina, Eduardo},
doi = {10.5220/0004979900260037},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Security in Legacy Systems Migration to the Cloud.pdf:pdf},
isbn = {9789897580314},
pages = {978--989},
title = {{Security in Legacy Systems Migration to the Cloud : A Systematic Mapping Study}},
year = {2014}
}
@article{Yong-liu2007,
author = {Yong-liu and Aiguang-yang},
doi = {10.1109/SNPD.2007.436},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Research and Application of Software-reuse.pdf:pdf},
isbn = {0769529097},
keywords = {software reuse,spare parts,stock},
pages = {588--593},
title = {{Research and Application of Software-reuse}},
year = {2007}
}
@article{Taibi,
author = {Taibi, Davide and Lenarduzzi, Valentina and Pahl, Claus},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Processes, Motivations, and Issues for Migrating to Microservices Architeture.pdf:pdf},
title = {{Processes , Motivations , and Issues for Migrating to Microservices Architectures : An Empirical Investigation}}
}
@article{Tilley2010a,
abstract = {Summary form only given. Regression testing is often performed as part of the software maintenance process. The amount of tests cases for a large-scale system can range from several hundred to many thousands, requiring significant computing resources and lengthy execution times, often precluding their use in an interactive setting. Traditional approaches to reduce the execution time for regression testing typically focus on excluding selected tests from the suite that need to be run after a change is made to the system. Cloud computing offers an alternate solution to this problem: the use of virtualized hardware, effectively unlimited storage, and software services that can aid in reducing the execution time of large test suites in a cost-effective manner. However, migrating software testing to the cloud is not without cost, nor is it necessarily the best solution to all testing problems. The new area of software testing in the cloud (STITC) lies at the intersection of these key areas: software testing, cloud computing, and system migration. This tutorial presents the SMART-T decision framework for migrating software testing to the cloud. The framework is based on the "SOA Migration, Adoption, and Reuse Technique" (SMART) from Carnegie Mellon University's Software Engineering Institute, which has been successfully used to migrate legacy components to a service-oriented environment. SMART-T helps organizations identify their current testing process, describe the requirements of the target cloud computing environment for performing software testing, and through a gap analysis of these two states map out the issues, effort, and potential benefits of migrating their software testing to the cloud. Several case studies are used to illustrate the use of the SMART-T framework in real-world settings.},
author = {Tilley, Scott and Parveen, Tauhida},
doi = {10.1109/icsm.2010.5610422},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/Artigos para Leitura/Migrating Software Testing to the Cloud.pdf:pdf},
isbn = {9781424486281},
pages = {1--1},
title = {{Migrating software testing to the cloud}},
year = {2010}
}
@article{Furda2018,
abstract = {Microservice migration is a promising technique to incrementally modernize monolithic legacy enterprise applications and enable them to exploit the benefits of cloud-computing environments. This article elaborates on three challenges of microservice migration: Multitenancy, statefulness, and data consistency. The authors show how to identify each of these challenges in legacy code and explain refactoring and architectural pattern-based migration techniques relevant to microservice architectures. They explain how multitenancy enables microservices to be utilized by different organizations with distinctive requirements, why statefulness affects both the availability and reliability of a microservice system, and why data consistency challenges are encountered when migrating legacy code that operates on a centralized data repository to microservices operating on decentralized data repositories. They also explain the interdependencies between multitenancy, statefulness, and data consistency.},
author = {Furda, Andrei and Fidge, Colin and Zimmermann, Olaf and Kelly, Wayne and Barros, Alistair},
doi = {10.1109/MS.2017.440134612},
file = {:C$\backslash$:/Users/Guilherme/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Furda et al. - 2018 - Migrating Enterprise Legacy Source Code to Microservices On Multitenancy, Statefulness, and Data Consistency.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {architectural patterns,data consistency,microservices,multitenancy,refactoring,software development,software engineering,statefulness},
number = {3},
pages = {63--72},
publisher = {IEEE},
title = {{Migrating Enterprise Legacy Source Code to Microservices: On Multitenancy, Statefulness, and Data Consistency}},
volume = {35},
year = {2018}
}
@article{Dragoni,
archivePrefix = {arXiv},
arxivId = {arXiv:1606.04036v4},
author = {Dragoni, Nicola and Giallorenzo, Saverio and Lafuente, Alberto Lluch and Mazzara, Manuel},
eprint = {arXiv:1606.04036v4},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/microservices yesterday, today and tomorrow.pdf:pdf},
pages = {1--17},
title = {{Microservices : yesterday , today , and tomorrow}}
}
@article{Kruger2017,
abstract = {Feature-oriented programming allows developers to physically separate and reuse features via composition. This promises several benefits compared to other reuse approaches, for instance, easier traceability and maintenance. However, due to their simplicity cloning and annotation-based product lines are established in practice. We aim to reduce risks and costs of migrating towards composition, lowering the adoption barrier. This includes i) processes, ii) migration approaches, and iii) assessing advantages and disadvantages. Overall, we will facilitate integrating physical separation into legacy applications.},
author = {Kruger, Jacob},
doi = {10.1109/ICSE-C.2017.46},
file = {:C$\backslash$:/Users/Guilherme/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kruger - 2017 - Lost in source code Physically separating features in legacy systems.pdf:pdf},
isbn = {9781538615898},
journal = {Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering Companion, ICSE-C 2017},
keywords = {Extraction,Migration,Software product line},
pages = {461--462},
title = {{Lost in source code: Physically separating features in legacy systems}},
year = {2017}
}
@article{Lawless,
author = {Lawless, Deirdre and Wu, Bing and Grimson, Jane},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/legacy-information-systems-issues-and-directions.pdf:pdf},
pages = {103--111},
title = {{Legacy Information Systems : Issues and Directions}}
}
@article{Richter2017a,
abstract = {In contrast to applications relying on specialized and expensive highly-available infrastructure, the basic approach of microservice architectures to achieve fault tolerance - and finally high availability - is to modularize the software system into small, self-contained services that are connected via implementation-independent interfaces. Microservices and all dependencies are deployed into self-contained environments called containers that are executed as multiple redundant instances. If a service fails, other instances will often still work and take over. Due to the possibility of failing infrastructure, these services have to be deployed on several physical systems. This horizontal scaling of redundant service instances can also be used for load-balancing. Decoupling the service communication using asynchronous message queues can increase fault tolerance, too. The Deutsche Bahn AG (German railway company) uses as system called EPA for seat reservations for inter-urban rail services. Despite its high availability, the EPA system in its current state has several disadvantages such as high operational cost, need for special hardware, technological dependencies, and expensive and time-consuming updates. With the help of a prototype, we evaluate the general properties of a microservice architecture and its dependability with reference to the legacy system. We focus on requirements for an equivalent microservice-based system and the migration process; services and data, containerization, communication via message queues; and achieving similar fault tolerance and high availability with the help of replication inside the resulting architecture.},
author = {Richter, Daniel and Konrad, Marcus and Utecht, Katharina and Polze, Andreas},
doi = {10.1109/QRS-C.2017.28},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/Artigos para Leitura/Highly-Available Applications on Unreliable Infrastructure.pdf:pdf},
isbn = {9781538620724},
journal = {Proceedings - 2017 IEEE International Conference on Software Quality, Reliability and Security Companion, QRS-C 2017},
pages = {130--137},
publisher = {IEEE},
title = {{Highly-Available Applications on Unreliable Infrastructure: Microservice Architectures in Practice}},
year = {2017}
}
@misc{Carvalho,
author = {Carvalho, Luiz and Garcia, Alessandro and Assun{\c{c}}{\~{a}}o, Wesley K. G.},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Extraction of Configurable and Reusable Microservices from Legacy Systems An Exploratory Study.pdf:pdf},
title = {{Extraction of Configurable and Reusable Microservices from Legacy Systems An Exploratory Study.pdf}}
}
@article{Kamimura2019a,
abstract = {Technology that facilitates rapid modification of existing business applications is necessary and it has been reported that making the system more adaptable to change is the strongest driver for legacy system modernization. There has been considerable interest in service-oriented architectures or microservices which enables the system to be quickly changed. Refactoring and, in particular, re-modularization operations can be performed to repair the design of a software system. Various approaches have been proposed to support developers during the re-modularization of a software system. The common problem in these efforts is to identify from monolithic applications the candidates of microservices, i.e., the programs or data that can be turned into cohesive, standalone services; this is a tedious manual effort that requires analyzing many dimensions of software architecture views and often heavily relies on the experience and expertise of the expert performing the extraction. To solve this problem, we developed a method that identifies the candidates of microservices from the source code by using software clustering algorithm SArF with the relation of 'program groups' and 'data' which we defined. Our method also visualizes the extracted candidates to show the relationship between extracted candidates and the whole structure. The candidates and visualization help the developers to capture the overview of the whole system and facilitated a dialogue with customers. We report two case studies to evaluate our results in which we applied our method to an open source application and an industrial application with our results reviewed by developers.},
author = {Kamimura, Manabu and Yano, Keisuke and Hatano, Tomomi and Matsuo, Akihiko},
doi = {10.1109/APSEC.2018.00072},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/Artigos para Leitura/Extracting Candidates of Microservices from Monolithic Application Code.pdf:pdf},
isbn = {9781728119700},
issn = {15301362},
journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
keywords = {microservice architecture,modernization,partition,program comprehension,software clustering,visualization},
pages = {571--580},
publisher = {IEEE},
title = {{Extracting Candidates of Microservices from Monolithic Application Code}},
volume = {2018-Decem},
year = {2019}
}
@article{Fetzer2016a,
abstract = {Safeguarding the correctness of critical software is a grand challenge. A microservice-based system is described that builds trustworthy systems on top of legacy hardware and software components, ensuring microservices' integrity, confidentiality, and correct execution with the help of secure enclaves.},
author = {Fetzer, Christof},
doi = {10.1109/MSP.2016.129},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/Artigos para Leitura/Building Critical Applications Using Microservices.pdf:pdf},
issn = {15584046},
journal = {IEEE Security and Privacy},
keywords = {Linux,hardware,microservices,secure enclaves,security,software},
number = {6},
pages = {86--89},
publisher = {IEEE},
title = {{Building critical applications using microservices}},
volume = {14},
year = {2016}
}
@article{Baseada2017,
author = {Baseada, Arquitetura and Microservices, E M},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/DISSERTA{\c{C}}{\~{A}}O Bruno Chaves de Freitas.pdf:pdf},
title = {{Bruno Chaves de Freitas}},
year = {2017}
}
@article{Bennetta,
author = {Bennett, Keith},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/00363157.pdf:pdf},
title = {{Amnh no}}
}
@article{Rajavat,
author = {Rajavat, Er Anand and Tokekar, Vrinda},
doi = {10.1109/CONSEG.2012.6349488},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/A Quantitative Model for the Evaluation of reengineering risk in infrastructure perspective of legacy system.pdf:pdf},
journal = {2012 CSI Sixth International Conference on Software Engineering (CONSEG)},
pages = {1--8},
publisher = {IEEE},
title = {{A Quantitative Model for the Evaluation of Reengineering Risk in Infrastructure Perspective of Legacy System}}
}
@article{Yang,
author = {Yang, Xiaohu and Chen, Lu and Wang, Xinyu and Cristoforo, Jerry},
file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/A Dual-Spiral Reengineering Model for legacy systen.pdf:pdf},
title = {{A Dual-Spiral Reengineering Model for Legacy System}}
}
@article{Ibrahim2009,
	author = {Ibrahim, Hamdy and Far, Behrouz H and Eberlein, Armin},
	doi = {10.1109/IRI.2009.5211557},
	file = {:C$\backslash$:/Users/Guilherme/Documents/Mestrado/mestrado/Artigos para Leitura/Scalability Improvement in Software Evaluation Methodologies.pdf:pdf},
	isbn = {9781424441167},
	journal = {2009 IEEE International Conference on Information Reuse {\&} Integration},
	keywords = {agent-oriented software,cots,evaluation and selection,scalability,software evaluation},
	pages = {236--241},
	publisher = {IEEE},
	title = {{Scalability Improvement in Software Evaluation Methodologies}},
	year = {2009}
}
